amenity_decay = -log(0.5)/amenity_quantity
)
# Chunk 16
amenity_preference <- data.frame(
amenity = c(
"park",
"convenience",
"restaurant",
"supermarket",
"library"
),
amenity_value = c(
0.8,
0.6,
0.25,
1,
0.7
),
amenity_quantity = c(
2,
5,
30,
1,
1
)
) %>%
mutate(
amenity_decay = -log(0.5)/(amenity_quantity)
)
mode_preference <- data.frame(
mode = c(
"walking",
"biking",
"driving"
),
mode_value = c(
1,
0.7,
0.5
),
mode_reasonable = c(
15,
10,
20
)
) %>%
mutate(
mode_decay = -log(0.5)/mode_reasonable
)
# Chunk 1: setup
knitr::opts_chunk$set(echo = F, warning = F, message = FALSE)
# Chunk 2
library(tidyverse)
library(sf)
library(tigris)
library(censusapi)
library(mapview)
library(leaflet)
library(mapboxapi)
# Chunk 3
pois <- st_read("/Volumes/GoogleDrive-105843855243256448391/Shared drives/SFBI/Data Library/OSM/gis_osm_pois_a_free_1.shp")
# Chunk 4
pois_summary <- pois %>%
st_drop_geometry() %>%
group_by(fclass) %>%
count() %>%
arrange(desc(n))
pois_summary
# Chunk 5
smc_boundary <- counties("CA") %>%
filter(NAME == "San Mateo") %>%
st_transform(st_crs(pois))
# will take longer but handles larger POIs better
smc_pois <- pois %>%
.[smc_boundary,] %>%
rename(amenity = fclass)
# faster
smc_pois <- pois %>%
st_centroid() %>%
.[smc_boundary,] %>%
rename(amenity = fclass)
# Chunk 6
mapview(smc_pois, zcol = "amenity")
# Chunk 7
pois_filter <- pois %>%
rename(amenity = fclass) %>%
filter(amenity %in% c(
"park",
"convenience",
"restaurant",
"supermarket",
"library"
))
mapview(pois_filter, zcol = "amenity")
# Chunk 8
saveRDS(pois_filter, "pois_filter.rds")
pois_filter <- readRDS("pois_filter.rds")
# Chunk 9
smc_cbgs <- block_groups("CA","San Mateo")
# Chunk 10
nfo_boundary <- places("CA") %>%
filter(NAME == "North Fair Oaks")
nfo_cbgs <- smc_cbgs %>%
st_centroid() %>%
.[nfo_boundary, ] %>%
st_drop_geometry() %>%
left_join(smc_cbgs %>% select(GEOID)) %>%
st_as_sf()
mapview(nfo_cbgs)
# Chunk 11
saveRDS(nfo_cbgs, "nfo_cbgs.rds")
nfo_cbgs <- readRDS("nfo_cbgs.rds")
# Chunk 12
# isochrones <- c("walking","driving") %>%
#   map_dfr(function(x){
#
#     mb_isochrone(
#       nfo_cbgs,
#       profile = x,
#       time = c(5,10,15)
#     ) %>%
#       mutate(mode = x)
#
#   })
# Chunk 13
#saveRDS(isochrones, "nfo_isochrones.rds")
isochrones <- readRDS("nfo_isochrones.rds")
# Chunk 14
access_raw <- isochrones %>%
st_make_valid() %>%
st_join(pois_filter) %>%
filter(!is.na(osm_id)) %>%
st_drop_geometry()
# Chunk 15
# brute force data frame
amenity_preference <- data.frame(
amenity = c("park","convenience","restaurant","supermarket","library"),
amenity_value = c(
0.8,
0.6,
0.25,
1,
0.7
),
amenity_quantity = c(
2,
5,
30,
1,
1
)
) %>%
mutate(
amenity_decay = -log(0.5)/amenity_quantity
)
# Chunk 16
amenity_preference <- data.frame(
amenity = c(
"park",
"convenience",
"restaurant",
"supermarket",
"library"
),
amenity_value = c(
0.8,
0.6,
0.25,
1,
0.7
),
amenity_quantity = c(
2,
5,
30,
1,
1
)
) %>%
mutate(
amenity_decay = -log(0.5)/(amenity_quantity)
)
mode_preference <- data.frame(
mode = c(
"walking",
"biking",
"driving"
),
mode_value = c(
1,
0.7,
0.5
),
mode_reasonable = c(
15,
10,
20
)
) %>%
mutate(
mode_decay = -log(0.5)/mode_reasonable
)
# Chunk 17
complete_temp <- access_raw %>%
left_join(
amenity_preference,
by = "amenity"
) %>%
left_join(
mode_preference,
by = "mode"
) %>%
group_by(id,mode,amenity) %>%
arrange(time) %>%
mutate(
amenity_rank = row_number() - 1
) %>%
ungroup()
# Chunk 18
complete_modes <- complete_temp %>%
mutate(
score = amenity_value * exp(-amenity_rank * amenity_decay) * exp(-time * mode_decay)
) %>%
group_by(id, mode) %>%
arrange(desc(score)) %>%
filter(!duplicated(osm_id)) %>%
summarize(
score = sum(score, na.rm=T)
)
# Chunk 19
complete_baseline <- data.frame(
amenity = amenity_preference$amenity %>%
rep(amenity_preference$amenity_quantity)
) %>%
left_join(
amenity_preference,
by = "amenity"
) %>%
group_by(amenity) %>%
mutate(
amenity_rank = row_number() - 1
) %>%
ungroup() %>%
mutate(
score = amenity_value * exp(-amenity_rank * amenity_decay) * 0.5
)
# Chunk 20
# Chunk 1: setup
knitr::opts_chunk$set(echo = F, warning = F, message = FALSE)
# Chunk 2
library(tidyverse)
library(sf)
library(tigris)
library(censusapi)
library(mapview)
library(leaflet)
library(mapboxapi)
# Chunk 3
pois <- st_read("/Volumes/GoogleDrive-105843855243256448391/Shared drives/SFBI/Data Library/OSM/gis_osm_pois_a_free_1.shp")
# Chunk 4
pois_summary <- pois %>%
st_drop_geometry() %>%
group_by(fclass) %>%
count() %>%
arrange(desc(n))
pois_summary
# Chunk 5
smc_boundary <- counties("CA") %>%
filter(NAME == "San Mateo") %>%
st_transform(st_crs(pois))
# will take longer but handles larger POIs better
smc_pois <- pois %>%
.[smc_boundary,] %>%
rename(amenity = fclass)
# faster
smc_pois <- pois %>%
st_centroid() %>%
.[smc_boundary,] %>%
rename(amenity = fclass)
# Chunk 6
mapview(smc_pois, zcol = "amenity")
# Chunk 7
pois_filter <- pois %>%
rename(amenity = fclass) %>%
filter(amenity %in% c(
"park",
"convenience",
"restaurant",
"supermarket",
"library"
))
mapview(pois_filter, zcol = "amenity")
# Chunk 8
saveRDS(pois_filter, "pois_filter.rds")
pois_filter <- readRDS("pois_filter.rds")
# Chunk 9
smc_cbgs <- block_groups("CA","San Mateo")
# Chunk 10
nfo_boundary <- places("CA") %>%
filter(NAME == "North Fair Oaks")
nfo_cbgs <- smc_cbgs %>%
st_centroid() %>%
.[nfo_boundary, ] %>%
st_drop_geometry() %>%
left_join(smc_cbgs %>% select(GEOID)) %>%
st_as_sf()
mapview(nfo_cbgs)
# Chunk 11
saveRDS(nfo_cbgs, "nfo_cbgs.rds")
nfo_cbgs <- readRDS("nfo_cbgs.rds")
# Chunk 12
# isochrones <- c("walking","driving") %>%
#   map_dfr(function(x){
#
#     mb_isochrone(
#       nfo_cbgs,
#       profile = x,
#       time = c(5,10,15)
#     ) %>%
#       mutate(mode = x)
#
#   })
# Chunk 13
#saveRDS(isochrones, "nfo_isochrones.rds")
isochrones <- readRDS("nfo_isochrones.rds")
# Chunk 14
access_raw <- isochrones %>%
st_make_valid() %>%
st_join(pois_filter) %>%
filter(!is.na(osm_id)) %>%
st_drop_geometry()
# Chunk 15
# brute force data frame
amenity_preference <- data.frame(
amenity = c("park","convenience","restaurant","supermarket","library"),
amenity_value = c(
0.8,
0.6,
0.25,
1,
0.7
),
amenity_quantity = c(
2,
5,
30,
1,
1
)
) %>%
mutate(
amenity_decay = -log(0.5)/amenity_quantity
)
# Chunk 16
amenity_preference <- data.frame(
amenity = c(
"park",
"convenience",
"restaurant",
"supermarket",
"library"
),
amenity_value = c(
0.8,
0.6,
0.25,
1,
0.7
),
amenity_quantity = c(
2,
5,
30,
1,
1
)
) %>%
mutate(
amenity_decay = -log(0.5)/(amenity_quantity)
)
mode_preference <- data.frame(
mode = c(
"walking",
"biking",
"driving"
),
mode_value = c(
1,
0.7,
0.5
),
mode_reasonable = c(
15,
10,
20
)
) %>%
mutate(
mode_decay = -log(0.5)/mode_reasonable
)
# Chunk 17
complete_temp <- access_raw %>%
left_join(
amenity_preference,
by = "amenity"
) %>%
left_join(
mode_preference,
by = "mode"
) %>%
group_by(id,mode,amenity) %>%
arrange(time) %>%
mutate(
amenity_rank = row_number() - 1
) %>%
ungroup()
# Chunk 18
complete_modes <- complete_temp %>%
mutate(
score = amenity_value * exp(-amenity_rank * amenity_decay) * exp(-time * mode_decay)
) %>%
group_by(id, mode) %>%
arrange(desc(score)) %>%
filter(!duplicated(osm_id)) %>%
summarize(
score = sum(score, na.rm=T)/sum(complete_baseline$score)
)
complete_total <- complete_temp %>%
mutate(
score = amenity_value * exp(-amenity_rank * amenity_decay) * mode_value * exp(-time * mode_decay)
) %>%
group_by(id) %>%
arrange(desc(score)) %>%
filter(!duplicated(osm_id)) %>%
summarize(
score = sum(score, na.rm = T)/sum(complete_baseline$score)
) %>%
mutate(mode = "total")
# Chunk 19
complete_baseline <- data.frame(
amenity = amenity_preference$amenity %>%
rep(amenity_preference$amenity_quantity)
) %>%
left_join(
amenity_preference,
by = "amenity"
) %>%
group_by(amenity) %>%
mutate(
amenity_rank = row_number() - 1
) %>%
ungroup() %>%
mutate(
score = amenity_value * exp(-amenity_rank * amenity_decay) * 0.5
)
# Chunk 20
complete <- rbind(
complete_modes,
complete_total
)
complete_map <- complete %>%
pivot_wider(
names_from = "mode",
values_from = "score"
)
boundary <- places("CA")
View(boundary)
pois <- st_read("/Volumes/GoogleDrive-105843855243256448391/Shared drives/SFBI/Data Library/OSM/gis_osm_pois_a_free_1.shp")
pois <- st_read("/Volumes/GoogleDrive/Shared drives/SFBI/Data Library/OSM/gis_osm_pois_a_free_1.shp")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
library(tigris)
library(censusapi)
library(mapview)
library(leaflet)
library(mapboxapi)
Sys.setenv(CENSUS_KEY="dbcdeeed2f9e907f31811ee78c1f239a2aa77934")
setwd("~/Documents/GitHub/_CEE218Y/A2")
boundary <- places("CA")
View(boundary)
boundary %>% select(Name)
boundary %>% select(NAME)
check<-boundary %>% select(NAME)
View(check)
knitr::opts_chunk$set(echo = TRUE, warning = F, message = FALSE)
alm_cbgs <- block_groups("CA","Alameda")
Oak_boundary <- places("CA") %>%
filter(NAME == "Oakland")
Oak_cbgs <- alm_cbgs %>%
st_centroid() %>%
.[Oak_boundary, ] %>%
st_drop_geometry() %>%
left_join(alm_cbgs %>% select(GEOID)) %>%
st_as_sf()
mapview(Oak_cbgs)
View(Oak_cbgs)
View(Oak_cbgs)
mapview(Oak_cbgs$GEOID)
leaflet(data = Oak_cbgs$GEOID)
alm_cbgs <- block_groups("CA","Alameda")
Oak_boundary <- places("CA") %>%
filter(NAME == "Oakland")
Oak_cbgs <- alm_cbgs %>%
st_centroid() %>%
.[Oak_boundary, ] %>%
st_drop_geometry() %>%
left_join(alm_cbgs %>% select(GEOID)) %>%
st_as_sf()
mapview(Oak_cbgs)
WOak_cbgs <- Oak_cbgs[c(87, 86, 88, 95, 159, 103, 102, 38, 41, 40, 39, 34, 169, 106, 105, 104, 101, 288, 290, 289, 37, 36, 35),]
mapview(WOak_cbgs)
