`Filtered POIs`  <- pois_filter %>%
st_centroid() %>%
.[Oak_boundary,] %>%
rename(Amenity = fclass)
pois <- st_read("/Volumes/GoogleDrive/Shared drives/SFBI/Data Library/OSM/gis_osm_pois_a_free_1.shp")
smc_boundary <- counties("CA") %>%
filter(NAME == "San Mateo") %>%
st_transform(st_crs(pois))
# will take longer but handles larger POIs better
smc_pois <- pois %>%
.[smc_boundary,] %>%
rename(amenity = fclass)
Oak_boundary <- readRDS(paste0(path_data,"Oak_boundary.rds"))%>%
st_transform(st_crs(pois_filter))
`Filtered POIs`  <- pois_filter %>%
st_centroid() %>%
.[Oak_boundary,] %>%
rename(Amenity = fclass)
Oak_boundary <- readRDS(paste0(path_data,"Oak_boundary.rds"))%>%
st_transform(st_crs(pois_filter))
`Filtered POIs`  <- pois_filter %>%
st_centroid() %>%
.[Oak_boundary,] %>%
rename(Amenity = amenity)
pois_map <- mapview(`Filtered POIs`, zcol="Amenity")
pois_map
`Filtered POIs`  <- pois_filter %>%
st_centroid() %>%
.[Oak_boundary,] %>%
rename(Amenity = amenity)
st_drop_geometry() %>%
left_join(pois_filter %>% select(osm_id)) %>%
st_as_sf()
pois_map <- mapview(`Filtered POIs`, zcol="Amenity")
pois_map
`Filtered POIs`  <- pois_filter %>%
st_centroid() %>%
.[Oak_boundary,] %>%
rename(Amenity = amenity)
View(`Filtered POIs`)
`Filtered POIs`  <- pois_filter %>%
st_centroid() %>%
.[Oak_boundary,] %>%
rename(Amenity = amenity)
st_drop_geometry()
`Filtered POIs` <- `Filtered POIs` %>%
left_join(pois_filter %>% select(osm_id)) %>%
st_as_sf()
`Filtered POIs`  <- pois_filter %>%
st_centroid() %>%
.[Oak_boundary,] %>%
rename(Amenity = amenity)
st_drop_geometry()
`Filtered POIs`  <- pois_filter %>%
st_centroid() %>%
.[Oak_boundary,] %>%
rename(Amenity = amenity) %>%
st_drop_geometry() %>%
left_join(pois_filter %>% select(osm_id)) %>%
st_as_sf()
pois_map <- mapview(`Filtered POIs`, zcol="Amenity")
pois_map
equity_total_plot
View(amenity_preference)
amenity_preference_table <- kable(amenity_preference)
library(knitr)
amenity_preference_table <- kable(amenity_preference)
kable(amenity_preference)
mode_preference_table <- kable(mode_preference)
sum(complete_baseline$score)
View(complete_format)
nocrit_amanity_count_walk <- c( dim(filter(complete_format, SM_walk == 0))[1],
dim(filter(complete_format, SM_walk > 0))[1],
dim(complete_format)[1])
nocrit_amanity_count_walk <- c( dim(filter(complete_format, SM_walk == 0))[1],
dim(complete_format)[1])
setwd("~/Documents/GitHub/_CEE218Y/A3")
library(tigris)
library(tidyverse)
library(censusapi)
library(sf)
library(leaflet)
library(mapboxapi)
library(jsonlite)
Sys.setenv(CENSUS_KEY="dbcdeeed2f9e907f31811ee78c1f239a2aa77934")
## adding 'path_item' for easy retrieval
# path <-  "/Volumes/GoogleDrive/Shared drives/SFBI/Data Library/LODES/"
path_data <- "/Volumes/GoogleDrive/.shortcut-targets-by-id/1i5yZPOBgJfC_blys_kNUJn1-FfLWoyiO/Assignments/3A/"
#path_data <- "G:/My Drive/218Y/Assignments/3A/"
path_lodes <- "G:/Shared drives/SFBI/Data Library/LODES"
ca_od_read <- read_csv(paste0(path_lodes,"ca_od_main_JT01_2019.csv.gz"))
ca_od_read <- read_csv(paste0(path_lodes,"ca_od_main_JT01_2019.csv.gz"))
path_lodes <-  "/Volumes/GoogleDrive/Shared drives/SFBI/Data Library/LODES/"
ca_od_read <- read_csv(paste0(path_lodes,"ca_od_main_JT01_2019.csv.gz"))
View(ca_od_read)
full_zip_od_final <- readRDS(paste0(path_data,"data/full_zip_od_final_cbg.rds"))
View(full_zip_od_final)
job_count <- full_zip_od_final %>%
group_by(year) %>%
summarise(JOB = sum(S000))
View(job_count)
job_count <- full_zip_od_final %>%
group_by(year) %>%
summarise(JOB = sum(S000)) %>%
rename(YEAR = year)
# job count
job_count <- full_zip_od_final %>%
group_by(year) %>%
summarise(JOB = sum(S000)) %>%
rename(YEAR = year)
saveRDS(job_count, paste0(path_data,"job_count.rds"))
paste0(path_data,"job_count.rds")
saveRDS(job_count, paste0(path_data,"data/job_count.rds"))
# read emissions data
emfac <- read.csv(paste0(path_data,"data/EMFAC2021-EI-202xClass-BayAreaAQMD2013-2014-2015-2016-2017-2018-2019-Summer-20220204082533.csv"), skip = 8) %>%
transmute(
Category = Vehicle.Category,
Fuel_Type = Fuel,
Percent_Trips = Trips/sum(Trips),
Percent_Miles = `Total.VMT`/sum(Total.VMT),
`MTCO2_Running_Exhaust` = CO2_RUNEX/Total.VMT,
`MTCO2_Start_Exhaust` = CO2_STREX/Trips
)
# total ghg emissions 2013-2019 (summed across all years)
SJ_trips_ghg <- emfac %>%
mutate(
trips = Percent_Trips * sum(full_zip_od_final$visits, na.rm = T),
vmt = Percent_Miles * sum(full_zip_od_final$distance, na.rm = T),
ghg = vmt * MTCO2_Running_Exhaust + trips*MTCO2_Start_Exhaust*2
)
# total vehicle GHGs bw 2013 and 2019
SJ_TotalGHG <- sum(SJ_trips_ghg$ghg) # in metric tonnes
# want vehicle GHGs per year
## initialize empty data frame
SJ_ghg <-
data.frame(
year = c(2013:2019),
emissions = c(2013:2019)*0
)
# loop through 2013 and 2019 grabbing final emissions
for (yr in 2013:2019){
for (i in 1:length(2013:2019)){
temp_ghg <- emfac %>%
mutate(
trips = Percent_Trips * SJ_annual$visits[i],
vmt = Percent_Miles * SJ_annual$distance[i],
ghg = vmt * MTCO2_Running_Exhaust + trips*MTCO2_Start_Exhaust*2
)
temp_net_ghg <- sum(temp_ghg$ghg)
temp_avg_ghg <- mean(temp_ghg$ghg)
SJ_ghg$emissions[i] <- temp_net_ghg
SJ_ghg$mean_emissions[i] <- temp_avg_ghg
}
}
# read emissions data
emfac <- read.csv(paste0(path_data,"data/EMFAC2021-EI-202xClass-BayAreaAQMD2013-2014-2015-2016-2017-2018-2019-Summer-20220204082533.csv"), skip = 8) %>%
transmute(
Category = Vehicle.Category,
Fuel_Type = Fuel,
Percent_Trips = Trips/sum(Trips),
Percent_Miles = `Total.VMT`/sum(Total.VMT),
`MTCO2_Running_Exhaust` = CO2_RUNEX/Total.VMT,
`MTCO2_Start_Exhaust` = CO2_STREX/Trips
)
# total ghg emissions 2013-2019 (summed across all years)
SJ_trips_ghg <- emfac %>%
mutate(
trips = Percent_Trips * sum(full_zip_od_final$visits, na.rm = T),
vmt = Percent_Miles * sum(full_zip_od_final$distance, na.rm = T),
ghg = vmt * MTCO2_Running_Exhaust + trips*MTCO2_Start_Exhaust*2
)
# total vehicle GHGs bw 2013 and 2019
SJ_TotalGHG <- sum(SJ_trips_ghg$ghg) # in metric tonnes
# want vehicle GHGs per year
## initialize empty data frame
SJ_ghg <-
data.frame(
year = c(2013:2019),
emissions = c(2013:2019)*0
)
# loop through 2013 and 2019 grabbing final emissions
for (yr in 2013:2019){
for (i in 1:length(2013:2019)){
temp_ghg <- emfac %>%
mutate(
trips = Percent_Trips * SJ_annual$visits[i],
vmt = Percent_Miles * SJ_annual$distance[i],
ghg = vmt * MTCO2_Running_Exhaust + trips*MTCO2_Start_Exhaust*2
)
temp_net_ghg <- sum(temp_ghg$ghg)
temp_avg_ghg <- mean(temp_ghg$ghg)
SJ_ghg$emissions[i] <- temp_net_ghg
SJ_ghg$mean_emissions[i] <- temp_avg_ghg
}
}
full_zip_od_final <- readRDS(paste0(path_data,"data/full_zip_od_final_cbg.rds"))
full_zip_od_final <- full_zip_od_final %>%
na.omit() # removes 11 na routes
full_zip_od_routed <- readRDS(paste0(path_data,"data/full_zip_od_routed_cbg.rds"))
emfac <- read.csv(paste0(path_data,"data/EMFAC2021-EI-202xClass-BayAreaAQMD2013-2014-2015-2016-2017-2018-2019-Summer-20220204082533.csv"), skip = 8) %>%
transmute(
Category = Vehicle.Category,
Fuel_Type = Fuel,
Percent_Trips = Trips/sum(Trips),
Percent_Miles = `Total.VMT`/sum(Total.VMT),
`MTCO2_Running_Exhaust` = CO2_RUNEX/Total.VMT,
`MTCO2_Start_Exhaust` = CO2_STREX/Trips
)
SJ_trips_ghg <- emfac %>%
mutate(
trips = Percent_Trips * sum(full_zip_od_final$visits, na.rm = T),
vmt = Percent_Miles * sum(full_zip_od_final$distance, na.rm = T),
ghg = vmt * MTCO2_Running_Exhaust + trips*MTCO2_Start_Exhaust*2
)
SJ_TotalGHG <- sum(SJ_trips_ghg$ghg)
SJ_ghg <-
data.frame(
year = c(2013:2019),
emissions = c(2013:2019)*0
)
View(SJ_ghg)
for (yr in 2013:2019){
for (i in 1:length(2013:2019)){
temp_ghg <- emfac %>%
mutate(
trips = Percent_Trips * SJ_annual$visits[i],
vmt = Percent_Miles * SJ_annual$distance[i],
ghg = vmt * MTCO2_Running_Exhaust + trips*MTCO2_Start_Exhaust*2
)
temp_net_ghg <- sum(temp_ghg$ghg)
temp_avg_ghg <- mean(temp_ghg$ghg)
SJ_ghg$emissions[i] <- temp_net_ghg
SJ_ghg$mean_emissions[i] <- temp_avg_ghg
}
}
knitr::opts_chunk$set(echo = TRUE)
job_count <- read_rds(paste0(path,"job_count.rds"))
library(tigris)
library(tidyverse)
library(sf)
library(leaflet)
library(mapboxapi)
# path used in loading pge database
path <- "/Volumes/GoogleDrive/.shortcut-targets-by-id/1i5yZPOBgJfC_blys_kNUJn1-FfLWoyiO/Assignments/3A/data/" # mac path
pge_data <- readRDS(paste0(path,"pge_data.rds"))
sj_pge_data <-
pge_data %>%
filter(ZIPCODE == "95113"  | ZIPCODE == "95112") %>%
filter(CUSTOMERCLASS %in% c(
"Elec- Commercial",
"Elec- Residential",
"Gas- Commercial",
"Gas- Residential"
)) %>%
mutate(
ENERGYTYPE = CUSTOMERCLASS # switched b/c we are supposed cc to have that as well
) %>%
group_by(ZIPCODE, ENERGYTYPE, YEAR) %>%
summarize(
TOTALKBTU = sum(TOTALKBTU, na.rm=T),
TOTALTCO2E = sum(TOTALTCO2E, na.rm=T),
TOTALCUSTOMERS = mean(TOTALCUSTOMERS, na.rm=T)
) %>%
group_by(ENERGYTYPE, YEAR) %>%
summarize(across(
c(TOTALKBTU,TOTALTCO2E,TOTALCUSTOMERS),
~sum(.,na.rm=T)
))
ggplot(
sj_pge_data,
aes(
x = as.factor(YEAR),
y = TOTALTCO2E
)
) +
geom_bar(stat = "identity", aes(fill = ENERGYTYPE), position = "dodge") +
labs(x = "Year", y = "tCO2e", title = "Downtown San Jose (95112 & 95113) Annual Energy Usage, 2013 to 2019") +
scale_fill_discrete(name="Energy Type")
# start of normalizing by pop
#zctas <- zctas()
zip <- uszip %>%
filter(GEOID10 %in% c("95112", "95113"))
job_count <- read_rds(paste0(path,"job_count.rds"))
us_zips <-
zctas(cb = T, progress_bar = F)
# start of normalizing by pop
#zctas <- zctas()
zip <- uszip %>%
filter(GEOID10 %in% c("95112", "95113"))
# start of normalizing by pop
#zctas <- zctas()
zip <- us_zips %>%
filter(GEOID10 %in% c("95112", "95113"))
ca_tracts <- tracts("CA")
zip_tracts <- ca_tracts %>%
st_centroid() %>%
.[zip, ] %>%
st_set_geometry(NULL)
pop_data <-
2013:2019 %>%
map_dfr(function(x){
temp_pop <-
getCensus(
name = "acs/acs5",
vintage = x,
region = "tract:*",
regionin = "state:06+county:085",
vars = "C02003_001E"
) %>%
mutate(
GEOID = paste0(state,county,tract)
)
temp <-
zip_tracts %>%
left_join(temp_pop) %>%
summarise(pop = sum(C02003_001E)) %>%
mutate(YEAR = x)
})
sj_pge_data_pop_norm <- sj_pge_data %>%
left_join(pop_data, by = "YEAR") %>%
left_join(job_count, by = "YEAR")
View(sj_pge_data_pop_norm)
sj_pge_data_pop_norm <- sj_pge_data %>%
left_join(pop_data, by = "YEAR") %>%
left_join(job_count, by = "YEAR")
mutate(
Pop_Norm_kBTU = casewhen(
ENERGYTYPE %in% c("Elec- Commercial", "Gas- Commercial") ~ TOTALKBTU / JOB,
ENERGYTYPE %in% c("Elec- Residential", "Gas- Residential") ~ TOTALKBTU / pop
),
Pop_Norm_CO2E = casewhen(
ENERGYTYPE %in% c("Elec- Commercial", "Gas- Commercial") ~ TOTALCO2E / JOB,
ENERGYTYPE %in% c("Elec- Residential", "Gas- Residential") ~ TOTALCO2E / pop
)
)
sj_pge_data_pop_norm <- sj_pge_data %>%
left_join(pop_data, by = "YEAR") %>%
left_join(job_count, by = "YEAR") %>%
mutate(
Pop_Norm_kBTU = casewhen(
ENERGYTYPE %in% c("Elec- Commercial", "Gas- Commercial") ~ TOTALKBTU / JOB,
ENERGYTYPE %in% c("Elec- Residential", "Gas- Residential") ~ TOTALKBTU / pop
),
Pop_Norm_CO2E = casewhen(
ENERGYTYPE %in% c("Elec- Commercial", "Gas- Commercial") ~ TOTALCO2E / JOB,
ENERGYTYPE %in% c("Elec- Residential", "Gas- Residential") ~ TOTALCO2E / pop
)
)
sj_pge_data_pop_norm <- sj_pge_data %>%
left_join(pop_data, by = "YEAR") %>%
left_join(job_count, by = "YEAR") %>%
mutate(
Pop_Norm_kBTU = case_when(
ENERGYTYPE %in% c("Elec- Commercial", "Gas- Commercial") ~ TOTALKBTU / JOB,
ENERGYTYPE %in% c("Elec- Residential", "Gas- Residential") ~ TOTALKBTU / pop
),
Pop_Norm_CO2E = case_when(
ENERGYTYPE %in% c("Elec- Commercial", "Gas- Commercial") ~ TOTALCO2E / JOB,
ENERGYTYPE %in% c("Elec- Residential", "Gas- Residential") ~ TOTALCO2E / pop
)
)
sj_pge_data_pop_norm <- sj_pge_data %>%
left_join(pop_data, by = "YEAR") %>%
left_join(job_count, by = "YEAR") %>%
mutate(
Pop_Norm_kBTU = case_when(
ENERGYTYPE %in% c("Elec- Commercial", "Gas- Commercial") ~ TOTALKBTU / JOB,
ENERGYTYPE %in% c("Elec- Residential", "Gas- Residential") ~ TOTALKBTU / pop
)
)
saveRDS(sj_pge_data_pop_norm, paste0(path,"sj_pge_data_pop_norm.rds"))
saveRDS(sj_pge_data, paste0(path,"sj_pge_data.rds"))
View(sj_pge_data)
knitr::opts_chunk$set(echo = TRUE)
building_emis <- readRDS(paste0(path,"sj_pge_data.rds")) %>%
select(`Emission Category` = ENERGYTYPE, TOTALCO2E, YEAR)
sj_pge_data <-
pge_data %>%
filter(ZIPCODE == "95113"  | ZIPCODE == "95112") %>%
filter(CUSTOMERCLASS %in% c(
"Elec- Commercial",
"Elec- Residential",
"Gas- Commercial",
"Gas- Residential"
)) %>%
mutate(
ENERGYTYPE = CUSTOMERCLASS # switched b/c we are supposed cc to have that as well
) %>%
group_by(ZIPCODE, ENERGYTYPE, YEAR) %>%
summarize(
TOTALKBTU = sum(TOTALKBTU, na.rm=T),
TOTALCO2E = sum(TOTALCO2E, na.rm=T),
TOTALCUSTOMERS = mean(TOTALCUSTOMERS, na.rm=T)
) %>%
group_by(ENERGYTYPE, YEAR) %>%
summarize(across(
c(TOTALKBTU,TOTALCO2E,TOTALCUSTOMERS),
~sum(.,na.rm=T)
))
building_emis <- readRDS(paste0(path,"sj_pge_data.rds")) %>%
select(`Emission Category` = ENERGYTYPE, CO2E = TOTALTCO2E, YEAR)
View(building_emis)
View(building_emis)
SJ_ghg <-
data.frame(
year = c(2013:2019),
emissions = c(2013:2019)*0
)
View(SJ_ghg)
View(SJ_ghg)
emissions <- building_emis
View(emissions)
stacked_emis_gg <- emissions %>%
ggplot() +
geom_bar(
aes(
x = Year,
y = CO2E,
fill = `Emission Category`
),
stat = "identity",
position = "stack"
) +
labs(
x = "Year",
y = "CO2-eq Emissions []",
title = "Downtown San Jose Emissions",
fill = "Emission Category"
)
stacked_emis <- ggplotly(stacked_emis_gg, tooltip="y")
library(plotly)
stacked_emis <- ggplotly(stacked_emis_gg, tooltip="y")
stacked_emis_gg
building_emis <- readRDS(paste0(path,"sj_pge_data.rds")) %>%
select(`Emission Category` = ENERGYTYPE, CO2E = TOTALTCO2E, Year = YEAR)
stacked_emis_gg <- emissions %>%
ggplot() +
geom_bar(
aes(
x = Year,
y = CO2E,
fill = `Emission Category`
),
stat = "identity",
position = "stack"
) +
labs(
x = "Year",
y = "CO2-eq Emissions []",
title = "Downtown San Jose Emissions",
fill = "Emission Category"
)
stacked_emis <- ggplotly(stacked_emis_gg, tooltip="y")
emissions <- building_emis
stacked_emis_gg <- emissions %>%
ggplot() +
geom_bar(
aes(
x = Year,
y = CO2E,
fill = `Emission Category`
),
stat = "identity",
position = "stack"
) +
labs(
x = "Year",
y = "CO2-eq Emissions []",
title = "Downtown San Jose Emissions",
fill = "Emission Category"
)
stacked_emis <- ggplotly(stacked_emis_gg, tooltip="y")
stacked_emis
prop_emis_gg <- emissions %>%
ggplot() +
geom_bar(
aes(
x = Year,
y = CO2E,
fill = `Emission Category`
),
stat = "identity",
position = "fill"
) +
labs(
x = "Year",
y = "CO2-eq Emissions []",
title = "Downtown San Jose Emissions",
fill = "Emission Category"
)
prop_emis <- ggplotly(prop_emis_gg, tooltip="y")
prop_emis
stacked_emis_gg <- emissions %>%
ggplot() +
geom_bar(
aes(
x = Year %>% factor(),
y = CO2E,
fill = `Emission Category`
),
stat = "identity",
position = "stack"
) +
labs(
x = "Year",
y = "CO2-eq Emissions []",
title = "Downtown San Jose Emissions",
fill = "Emission Category"
) #+
#scale_x_continuous(breaks=c(2013,))
stacked_emis <- ggplotly(stacked_emis_gg, tooltip="y")
stacked_emis
